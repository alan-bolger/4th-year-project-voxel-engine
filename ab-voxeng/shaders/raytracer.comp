#version 430 core

layout(binding = 0, rgba32f) uniform image2D framebuffer;
layout(binding = 3, std430) buffer voxelData
{
    vec3 voxelData_SSBO[];
};

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;

struct directionalLight 
{
    vec3 direction;  
    vec3 ambient;
    vec3 diffuse;
};  

directionalLight light;

#define MAX_SCENE_BOUNDS 1000.0
#define NUM_BOXES 500000

vec3 cubeSize = vec3(0.5, 0.5, 0.5);

struct hitinfo 
{
    vec2 lambda;
    int bi;
    vec3 center;
    vec3 surfaceColour;
};

vec2 intersectBox(vec3 origin, vec3 dir, vec3 center) 
{
    vec3 tMin = ((center - cubeSize) - origin) / dir;
    vec3 tMax = ((center + cubeSize) - origin) / dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return vec2(tNear, tFar);
}

bool intersectBoxes(vec3 origin, vec3 dir, out hitinfo info) 
{
    float smallest = MAX_SCENE_BOUNDS;
    bool found = false;
    
    for (int i = 0; i < NUM_BOXES; i++)
    {
        vec2 lambda = intersectBox(origin, dir, voxelData_SSBO[i]);

        if (lambda.x > 0.0 && lambda.x < lambda.y && lambda.x < smallest)
        {
            info.lambda = lambda;
            info.bi = i;
            smallest = lambda.x;
            info.center = voxelData_SSBO[i];
            info.surfaceColour = vec3(1.0, 0.3, 0.3);
            found = true;
        }
    }

    return found;
}

vec3 calculateDirectionalLight(directionalLight light, vec3 normal, vec3 viewDir, hitinfo info)
{
    vec3 lightDir = normalize(-light.direction);
    float diff = max(dot(normal, lightDir), 0.0);
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 0.3);

    light.diffuse = vec3(1, 1, 1);
    light.ambient = vec3(1, 1, 1);

    vec3 ambient  = light.ambient * info.surfaceColour;
    vec3 diffuse  = light.diffuse * diff * info.surfaceColour;
    vec3 lighting = ambient + diffuse;

    return lighting;
}

vec4 trace(vec3 origin, vec3 dir) 
{
    light.direction = vec3(1, -1, 1);
    hitinfo i;

    if (intersectBoxes(origin, dir, i))
    {
        vec3 phit = origin + dir * i.lambda.x;
        vec3 normalDir = phit - i.center;
        normalDir = normalize(normalDir);
        i.surfaceColour += calculateDirectionalLight(light, normalDir, eye - phit, i);
        return vec4(i.surfaceColour, 1.0);
    }

    return vec4(0, 0, 0, 1.0);
}

layout (local_size_x = 32, local_size_y = 16) in;

void main(void) 
{
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    
    if (pix.x >= size.x || pix.y >= size.y) 
    {
        return;
    }
    
    vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);
    vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);
    vec4 colour = trace(eye, dir);
    imageStore(framebuffer, pix, colour);
}